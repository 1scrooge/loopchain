@startuml State Machine in Siever

[*] --> InitComponents
InitComponents: AddTimer: Connect to Radiostation

InitComponents --> Consensus : trigger::complete_init_components

state Timer
Timer: * Connect to Radiostation
Timer: * heartbeat to peers
Timer: * leader complain

state Consensus {
    [*] --> BlockHeightSync : trigger::block_height_sync

    state BlockHeightSync {
        [*] --> EvaluateNetwork : trigger::evaluate_network

        EvaluateNetwork: Check Leader
        EvaluateNetwork --> BlockSync : (if leader != self)\ntrigger::block_sync
        EvaluateNetwork --> SubscribeNetwork : (if leader == self)\ntrigger::subscribe_network

        BlockSync: StopTimer: leader complain
        BlockSync: Check Highest Block in Network
        BlockSync --> SubscribeNetwork : Succeeded\ntrigger::subscribe_network

        SubscribeNetwork: Connect Network (Subscribe to Radiostation, Join a quorum if not yet)
        SubscribeNetwork -up-> EvaluateNetwork
        SubscribeNetwork -right-> [*] : Block Synced

    }
    BlockHeightSync --> BlockGenerate: Complete Sync\n(if leader == self)
    BlockHeightSync -> Vote: Complete Sync\n(if leader != self)

    BlockGenerate: StopTimer: leader complain
    BlockGenerate: AddTimer: heartbeat to peers
    BlockGenerate -> Vote : Send AnnounceConfirmedBlock\n(made block count == max)

    Vote: StopTimer: heartbeat to peers
    Vote: AddTimer: leader complain
    Vote -left-> BlockHeightSync : Recv AnnounceUnConfirmedBlock\n(block.height >= mine + 2)
    Vote -> BlockGenerate : Recv AnnounceUnConfirmedBlock\n(if next leader == self)
    Vote -> LeaderComplain : !Recv heartbeat from leader by Timer (leader complain) \nSend LeaderComplain

    state LeaderComplain
    note right of LeaderComplain
      keep leader complain Timer
      until new leader elected
    end note
    LeaderComplain -> Vote : Recv AnnounceNewLeader\n(if next leader != self)
    LeaderComplain --> BlockGenerate : Send AnnounceNewLeader\n(if next leader == self)
}

Consensus --> GracefulShutdown

GracefulShutdown: StopTimer: ALL
GracefulShutdown --> [*]

@enduml